<div id="email-view"></div>

<script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min.js"></script>

<script type="text/template" id="email_view_tpl">
    <table>
        <tr>
            <th><button class="send-unsent-emails">Send All Unsent Emails</button></th>
            <th>Is Email Sent?</th>
            <th>From</th>
            <th>To</th>
            <th>Reply to</th>
            <th>Subject</th>
            <th>Text</th>
        </tr>

        {[ _.each(emailReports, function(emailReport) { ]}
        <tr class="email-report" data-reportID="{{ emailReport.reportID }}">
            <td><button class="send-email">Send Email</button></td>
            <td>{{ emailReport.isEmailSent ? "SENT" : "not sent" }}</td>
            <td>{{ emailReport.from }}</td>
            <td>{{ emailReport.to }}</td>
            <td>{{ emailReport.replyTo }}</td>
            <td>{{ emailReport.subject }}</td>
            <td><pre>{{ emailReport.text }}</pre></td>
        </tr>
        {[ }); ]}
    </table>
</script>

<script>
    _.templateSettings = {
        interpolate: /\{\{(.+?)\}\}/g,
        evaluate: /\{\[(.+?)\]\}/g
    };

    EmailView = Backbone.View.extend({
        initialize: function(args){
            this.emailReports = args.emailReports;
            this.render();
        },
        render: function() {
            var template = _.template($("#email_view_tpl").html(), {
                emailReports:this.emailReports });
            this.$el.html(template);
        },
        events: {
            "click .send-email": "sendEmail",
            "click .send-unsent-emails": "sendUnsentEmails"
        },
        sendEmail: function(event) {
            var isConfirmed = confirm("Are you sure?");
            if (!isConfirmed) return;

            var elem = $(event.target || event.currentTarget);
            var report = elem.parents(".email-report");
            var reportID = report.attr("data-reportID");
            var emailReport = _.findWhere(this.emailReports, {reportID:reportID});
            if (!emailReport) return;

            console.log(emailReport);
            socket.get("/gradereport/sendAsEmail", emailReport, _.bind(function(response) {
                console.log(response);
                if (response && response.isEmailSent) emailReport.isEmailSent = true;
                this.render();
            }, this));
        },
        sendUnsentEmails: function() {
            var isConfirmed = confirm("Are you sure?");
            if (!isConfirmed) return;

            var numToSend = this.emailReports.length;
            _.each(this.emailReports, _.bind(function(emailReport) {
                if (emailReport.isEmailSent) {
                    numToSend--;
                    if (numToSend === 0) this.render();
                    return;
                }

                socket.get("/gradereport/sendAsEmail", emailReport, function (response) {
                    console.log(response);
                    if (response && response.isEmailSent) emailReport.isEmailSent = true;
                    numToSend--;
                    if (numToSend === 0) this.render();
                });
            }, this));
        }
    });

    $(function() {
        var emailView = new EmailView({
            el:$("#email-view"),
            emailReports:<%- JSON.stringify(emailReports) %>
        });
    });
</script>
